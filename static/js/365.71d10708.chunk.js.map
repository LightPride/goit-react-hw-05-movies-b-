{"version":3,"file":"static/js/365.71d10708.chunk.js","mappings":"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","sources":["api/index.js","components/Pages/Movies/Movies.styled.js","components/SearchBar/SearchBar.styled.js","components/SearchBar/SearchBar.jsx","components/Pages/Movies/Movies.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/';\n\nconst API_KEY = 'ec3ca0e4403710b7fc1497b1dbf32c54';\n\nexport const getTrendingMovies = async () => {\n  const response = await fetch(\n    `${BASE_URL}3/trending/all/day?api_key=${API_KEY}&language=en-US`\n  );\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n  return response.json();\n};\n\nexport const getMovieById = async id => {\n  const response = await fetch(`${BASE_URL}3/movie/${id}?api_key=${API_KEY}`);\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n\n  return response.json();\n};\n\nexport const getMovieCredits = async id => {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n\n  return response.json();\n};\n\nexport const getMovieReviews = async id => {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n\n  return response.json();\n};\n\nexport const getMoviesBySearch = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}`\n  );\n  if (!response.ok) {\n    throw new Error('Oops... something went wrong...');\n  }\n\n  return response.json();\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n  &:hover {\n    color: #3eac9c;\n  }\n`;\n\nexport const PageLi = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 6px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 400px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 2px solid black;\n  border-left: none;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 0.6;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: 2px solid black;\n  border-right: none;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  outline: none;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-left: 4px;\n  padding-right: 4px;\n  &:hover {\n    opacity: 0.6;\n  }\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import {\n  SearchForm,\n  SearchFormInput,\n  SearchFormButton,\n} from './SearchBar.styled';\nimport { FaSearch } from 'react-icons/fa';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\n\nexport default function SearchBar({ onSubmit }) {\n  // const [searchInput, setSearchInput] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n  const handleInputChange = event => {\n    const movieNameValue = event.target.value;\n\n    if (movieNameValue === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: movieNameValue });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (movieName.trim() === '') {\n      Notiflix.Notify.warning('Search querry should not be empty!');\n      return;\n    }\n    onSubmit(movieName);\n    const form = event.currentTarget;\n    form.reset();\n  };\n\n  return (\n    <>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search Movies\"\n          onChange={handleInputChange}\n        />\n        <SearchFormButton type=\"submit\">\n          <FaSearch />\n        </SearchFormButton>\n      </SearchForm>\n    </>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { getMoviesBySearch } from 'api';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MovieLink, PageLi } from './Movies.styled';\nimport SearchBar from '../../SearchBar/SearchBar';\nimport Notiflix from 'notiflix';\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const previousSearch = searchParams.get('query');\n  //\n  useEffect(() => {\n    if (previousSearch) {\n      fetchMovies(previousSearch);\n    }\n  }, [previousSearch]);\n  const handleFormSubmit = movieName => {\n    fetchMovies(movieName);\n  };\n\n  const fetchMovies = async movieName => {\n    try {\n      const data = await getMoviesBySearch(movieName);\n      setMovies(data.results);\n      localStorage.setItem('movies', JSON.stringify(data.results));\n\n      if (data.results.length === 0) {\n        Notiflix.Notify.warning('There are no films found');\n      }\n    } catch (error) {}\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleFormSubmit}></SearchBar>\n      <ul>\n        {movies.map(({ title, name, id }) => {\n          return (\n            <PageLi key={id}>\n              <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n                {name ? name : title}\n              </MovieLink>\n            </PageLi>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n"],"names":["BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","Error","json","getMovieById","id","getMovieCredits","getMovieReviews","getMoviesBySearch","searchQuery","MovieLink","styled","Link","PageLi","SearchForm","SearchFormButton","SearchFormInput","SearchBar","onSubmit","useSearchParams","searchParams","setSearchParams","movieName","get","event","preventDefault","trim","currentTarget","reset","Notiflix","type","autoComplete","autoFocus","placeholder","onChange","movieNameValue","target","value","query","Movies","useState","movies","setMovies","location","useLocation","previousSearch","useEffect","fetchMovies","data","results","localStorage","setItem","JSON","stringify","length","map","title","name","to","state","from"],"sourceRoot":""}